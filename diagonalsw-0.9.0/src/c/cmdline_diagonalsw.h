/** @file cmdline_diagonalsw.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_DIAGONALSW_H
#define CMDLINE_DIAGONALSW_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "diagonalsw"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "diagonalsw"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.9.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * databasefile_arg;	/**< @brief A FASTA-formatted sequence database file.  */
  char * databasefile_orig;	/**< @brief A FASTA-formatted sequence database file original value given at command line.  */
  const char *databasefile_help; /**< @brief A FASTA-formatted sequence database file help description.  */
  char * queryfile_arg;	/**< @brief A single sequence file in FASTA-format.  */
  char * queryfile_orig;	/**< @brief A single sequence file in FASTA-format original value given at command line.  */
  const char *queryfile_help; /**< @brief A single sequence file in FASTA-format help description.  */
  char * profilefile_arg;	/**< @brief A profile file.  */
  char * profilefile_orig;	/**< @brief A profile file original value given at command line.  */
  const char *profilefile_help; /**< @brief A profile file help description.  */
  char * matrixfile_arg;	/**< @brief Integer similarity matrix file ( scoring matrix ).  */
  char * matrixfile_orig;	/**< @brief Integer similarity matrix file ( scoring matrix ) original value given at command line.  */
  const char *matrixfile_help; /**< @brief Integer similarity matrix file ( scoring matrix ) help description.  */
  int gapopen_arg;	/**< @brief Penalty for starting alignment gap (non-positive integer) (default='-10').  */
  char * gapopen_orig;	/**< @brief Penalty for starting alignment gap (non-positive integer) original value given at command line.  */
  const char *gapopen_help; /**< @brief Penalty for starting alignment gap (non-positive integer) help description.  */
  int gapextend_arg;	/**< @brief Penalty for extending alignment gap (non-positive integer) (default='-2').  */
  char * gapextend_orig;	/**< @brief Penalty for extending alignment gap (non-positive integer) original value given at command line.  */
  const char *gapextend_help; /**< @brief Penalty for extending alignment gap (non-positive integer) help description.  */
  int print_sequence_id_flag;	/**< @brief In addition to the score, also print the sequence-id (default=off).  */
  const char *print_sequence_id_help; /**< @brief In addition to the score, also print the sequence-id help description.  */
  int verify_algorithm_flag;	/**< @brief verify vector implementation against scalar implementation (default=off).  */
  const char *verify_algorithm_help; /**< @brief verify vector implementation against scalar implementation help description.  */
  int disable_threading_flag;	/**< @brief disable all threading (default=off).  */
  const char *disable_threading_help; /**< @brief disable all threading help description.  */
  int nr_of_threads_arg;	/**< @brief numbers of threads (normally autodetected).  */
  char * nr_of_threads_orig;	/**< @brief numbers of threads (normally autodetected) original value given at command line.  */
  const char *nr_of_threads_help; /**< @brief numbers of threads (normally autodetected) help description.  */
  int tokens_per_thread_arg;	/**< @brief numbers of tokens per thread (normally autodetected) (default='5').  */
  char * tokens_per_thread_orig;	/**< @brief numbers of tokens per thread (normally autodetected) original value given at command line.  */
  const char *tokens_per_thread_help; /**< @brief numbers of tokens per thread (normally autodetected) help description.  */
  int sequences_per_compute_chunk_arg;	/**< @brief nr of sequences each thread are given per computation iteration ( doesn't influence the result but may influence the speed ) (default='10').  */
  char * sequences_per_compute_chunk_orig;	/**< @brief nr of sequences each thread are given per computation iteration ( doesn't influence the result but may influence the speed ) original value given at command line.  */
  const char *sequences_per_compute_chunk_help; /**< @brief nr of sequences each thread are given per computation iteration ( doesn't influence the result but may influence the speed ) help description.  */
  int benchmark_flag;	/**< @brief print computation speed (unit is GigaCells/s) (default=off).  */
  const char *benchmark_help; /**< @brief print computation speed (unit is GigaCells/s) help description.  */
  int benchmark_verbose_flag;	/**< @brief print computation speed (unit is GigaCells/s) and additional information such as user time, number of db sequences that needed to use the word sized function, length of querysequence, sum of db sequence lengths, number of db sequences (default=off).  */
  const char *benchmark_verbose_help; /**< @brief print computation speed (unit is GigaCells/s) and additional information such as user time, number of db sequences that needed to use the word sized function, length of querysequence, sum of db sequence lengths, number of db sequences help description.  */
  int max_sequence_name_length_arg;	/**< @brief Maximum allowed length of a sequence name (default='256').  */
  char * max_sequence_name_length_orig;	/**< @brief Maximum allowed length of a sequence name original value given at command line.  */
  const char *max_sequence_name_length_help; /**< @brief Maximum allowed length of a sequence name help description.  */
  int max_query_sequence_length_arg;	/**< @brief Maximum allowed length of the query sequence (default='2000').  */
  char * max_query_sequence_length_orig;	/**< @brief Maximum allowed length of the query sequence original value given at command line.  */
  const char *max_query_sequence_length_help; /**< @brief Maximum allowed length of the query sequence help description.  */
  int max_db_sequence_length_arg;	/**< @brief Maximum allowed length of any of the db sequences (default='10000').  */
  char * max_db_sequence_length_orig;	/**< @brief Maximum allowed length of any of the db sequences original value given at command line.  */
  const char *max_db_sequence_length_help; /**< @brief Maximum allowed length of any of the db sequences help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int databasefile_given ;	/**< @brief Whether databasefile was given.  */
  unsigned int queryfile_given ;	/**< @brief Whether queryfile was given.  */
  unsigned int profilefile_given ;	/**< @brief Whether profilefile was given.  */
  unsigned int matrixfile_given ;	/**< @brief Whether matrixfile was given.  */
  unsigned int gapopen_given ;	/**< @brief Whether gapopen was given.  */
  unsigned int gapextend_given ;	/**< @brief Whether gapextend was given.  */
  unsigned int print_sequence_id_given ;	/**< @brief Whether print-sequence-id was given.  */
  unsigned int verify_algorithm_given ;	/**< @brief Whether verify-algorithm was given.  */
  unsigned int disable_threading_given ;	/**< @brief Whether disable-threading was given.  */
  unsigned int nr_of_threads_given ;	/**< @brief Whether nr-of-threads was given.  */
  unsigned int tokens_per_thread_given ;	/**< @brief Whether tokens-per-thread was given.  */
  unsigned int sequences_per_compute_chunk_given ;	/**< @brief Whether sequences-per-compute-chunk was given.  */
  unsigned int benchmark_given ;	/**< @brief Whether benchmark was given.  */
  unsigned int benchmark_verbose_given ;	/**< @brief Whether benchmark-verbose was given.  */
  unsigned int max_sequence_name_length_given ;	/**< @brief Whether max-sequence-name-length was given.  */
  unsigned int max_query_sequence_length_given ;	/**< @brief Whether max-query-sequence-length was given.  */
  unsigned int max_db_sequence_length_given ;	/**< @brief Whether max-db-sequence-length was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_DIAGONALSW_H */
